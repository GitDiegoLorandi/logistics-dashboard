import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';
import { Input } from './UI/input';
import { Select } from './UI/select';
import { Button } from './UI/button';
import LoadingSpinner from './UI/LoadingSpinner';

// Updated validation schema â€“ orderId is now auto-generated by backend
const validationSchema = Yup.object({
  status: Yup.string()
    .oneOf(['Pending', 'In Transit', 'Delivered'], 'Invalid status')
    .required('Status is required'),
  customer: Yup.string().required('Customer name is required'),
  deliveryAddress: Yup.string().required('Delivery address is required'),
});

const DeliveryForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting, isValid },
    reset,
  } = useForm({
    resolver: yupResolver(validationSchema),
    mode: 'onChange', // Real-time validation
  });

  const [submitSuccess, setSubmitSuccess] = useState(false);

  const onSubmit = async data => {
    try {
      const response = await fetch('http://localhost:5000/api/deliveries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (response.ok) {
        setSubmitSuccess(true);
        alert('Delivery created successfully!');
        reset();
      } else {
        alert(result.message || 'Failed to create delivery.');
      }
    } catch (error) {
      console.error('Error creating delivery:', error);
      alert('Failed to connect to the server.');
    }
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className='space-y-6 max-w-md mx-auto bg-card p-6 rounded-lg shadow'
    >
      <div className='space-y-2'>
        <label htmlFor='customer' className='text-sm font-medium'>
          Customer *
        </label>
        <Input
          id='customer'
          placeholder='Customer name'
          {...register('customer')}
          disabled={isSubmitting}
        />
        {errors.customer && (
          <p className='text-destructive text-xs'>{errors.customer.message}</p>
        )}
      </div>

      <div className='space-y-2'>
        <label htmlFor='deliveryAddress' className='text-sm font-medium'>
          Delivery Address *
        </label>
        <Input
          id='deliveryAddress'
          placeholder='Street, City, Country'
          {...register('deliveryAddress')}
          disabled={isSubmitting}
        />
        {errors.deliveryAddress && (
          <p className='text-destructive text-xs'>
            {errors.deliveryAddress.message}
          </p>
        )}
      </div>

      <div className='space-y-2'>
        <label htmlFor='status' className='text-sm font-medium'>
          Status *
        </label>
        <Select id='status' {...register('status')} disabled={isSubmitting}>
          <option value=''>Select status</option>
          <option value='Pending'>Pending</option>
          <option value='In Transit'>In Transit</option>
          <option value='Delivered'>Delivered</option>
        </Select>
        {errors.status && (
          <p className='text-destructive text-xs'>{errors.status.message}</p>
        )}
      </div>

      <Button
        type='submit'
        className='w-full'
        disabled={!isValid || isSubmitting}
      >
        {isSubmitting ? <LoadingSpinner size='small' /> : 'Submit'}
      </Button>

      {submitSuccess && (
        <p className='text-green-600 text-sm text-center pt-2'>
          Delivery created successfully!
        </p>
      )}
    </form>
  );
};

export default DeliveryForm;
