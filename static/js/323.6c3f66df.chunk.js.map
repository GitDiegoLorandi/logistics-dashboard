{"version":3,"file":"static/js/323.6c3f66df.chunk.js","mappings":"yMAWA,MAoCA,EApCuBA,IAAiC,IAAhC,SAAEC,EAAQ,aAAEC,GAAcF,EAIhD,IAFwBG,aAAaC,QAAQ,aAG3C,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAO,IAItC,MAAMC,EAAWN,aAAaC,QAAQ,QACtC,IAAIM,EAAW,KAEf,GAAID,EACF,IAAK,IAADE,EAEFD,EAA0B,QAAlBC,EADWC,KAAKC,MAAMJ,GACRK,YAAI,IAAAH,OAAA,EAAfA,EAAiBI,aAC9B,CAAE,MAAOC,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,CAMF,OAFwBN,GAAYR,EAAagB,SAASR,GAMnDT,GAHEI,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,aAAaC,SAAO,GAG3B,C","sources":["components/role-based-route.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Role-based route component that redirects to dashboard if user doesn't have required role\r\n * @param {Object} props - Component props\r\n * @param {React.ReactNode} props.children - Child components to render if authenticated and authorized\r\n * @param {Array<string>} props.allowedRoles - Array of roles allowed to access this route\r\n * @returns {React.ReactElement} Role-based route component\r\n */\r\nconst RoleBasedRoute = ({ children, allowedRoles }) => {\r\n  // Check if user is authenticated\r\n  const isAuthenticated = localStorage.getItem('authToken');\r\n  \r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n  \r\n  // Get user data from localStorage\r\n  const userData = localStorage.getItem('user');\r\n  let userRole = null;\r\n  \r\n  if (userData) {\r\n    try {\r\n      const parsedUser = JSON.parse(userData);\r\n      userRole = parsedUser.role?.toLowerCase();\r\n    } catch (error) {\r\n      console.error('Error parsing user data:', error);\r\n    }\r\n  }\r\n  \r\n  // Check if user role is in allowed roles\r\n  const hasRequiredRole = userRole && allowedRoles.includes(userRole);\r\n  \r\n  if (!hasRequiredRole) {\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n  \r\n  return children;\r\n};\r\n\r\nRoleBasedRoute.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  allowedRoles: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default RoleBasedRoute; "],"names":["_ref","children","allowedRoles","localStorage","getItem","_jsx","Navigate","to","replace","userData","userRole","_parsedUser$role","JSON","parse","role","toLowerCase","error","console","includes"],"sourceRoot":""}