{"version":3,"file":"static/js/707.ca1635c8.chunk.js","mappings":"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","sources":["components/Deliveries/deliveries-table.js","components/Deliveries/deliveries-page.js","components/UI/address-autocomplete.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n  getFilteredRowModel,\r\n  useReactTable,\r\n} from '@tanstack/react-table';\r\nimport {\r\n  Package,\r\n  ArrowUpDown,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n} from 'lucide-react';\r\nimport { Table, TableHeader as THead, TableRow as TR, TableHead as TH, TableBody as TBody, TableCell as TD } from '../UI/table';\r\nimport { Badge } from '../UI/badge';\r\nimport { Button } from '../UI/button';\r\n\r\n/**\r\n * DeliveriesTable component for displaying a list of deliveries\r\n */\r\nexport const DeliveriesTable = ({\r\n  data = [],\r\n  onEdit,\r\n  onView,\r\n  onDelete,\r\n  userRole,\r\n}) => {\r\n  const { t } = useTranslation(['deliveries', 'common']);\r\n\r\n  /**\r\n   * StatusBadge component for delivery status\r\n   */\r\n  const StatusBadge = ({ status }) => {\r\n    // Map backend status values to UI display values\r\n    const normalizedStatus = status === 'PENDING' ? 'Pending' :\r\n                            status === 'IN_TRANSIT' ? 'In Transit' :\r\n                            status === 'DELIVERED' ? 'Delivered' :\r\n                            status === 'CANCELLED' ? 'Cancelled' :\r\n                            status; // Use as-is if not matching\r\n\r\n    const statusMap = {\r\n      'Pending': { variant: 'warning', label: t('statuses.pending') },\r\n      'In Transit': { variant: 'info', label: t('statuses.inTransit') },\r\n      'Delivered': { variant: 'success', label: t('statuses.delivered') },\r\n      'Cancelled': { variant: 'default', label: t('statuses.cancelled') },\r\n      'PENDING': { variant: 'warning', label: t('statuses.pending') },\r\n      'IN_TRANSIT': { variant: 'info', label: t('statuses.inTransit') },\r\n      'DELIVERED': { variant: 'success', label: t('statuses.delivered') },\r\n      'CANCELLED': { variant: 'default', label: t('statuses.cancelled') },\r\n    };\r\n\r\n    const { variant, label } = statusMap[normalizedStatus] || { \r\n      variant: 'default', \r\n      label: normalizedStatus \r\n    };\r\n\r\n    return <Badge variant={variant}>{label}</Badge>;\r\n  };\r\n\r\n  StatusBadge.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n  };\r\n\r\n  /**\r\n   * PriorityBadge component for delivery priority\r\n   */\r\n  const PriorityBadge = ({ priority }) => {\r\n    // Map backend priority values to UI display values\r\n    const normalizedPriority = priority === 'HIGH' ? 'High' :\r\n                              priority === 'MEDIUM' ? 'Medium' :\r\n                              priority === 'LOW' ? 'Low' :\r\n                              priority === 'URGENT' ? 'Urgent' :\r\n                              priority; // Use as-is if not matching\r\n\r\n    const priorityMap = {\r\n      'High': { variant: 'destructive', label: t('priorities.high') },\r\n      'Medium': { variant: 'warning', label: t('priorities.medium') },\r\n      'Low': { variant: 'default', label: t('priorities.low') },\r\n      'Urgent': { variant: 'destructive', label: t('priorities.urgent') },\r\n      'HIGH': { variant: 'destructive', label: t('priorities.high') },\r\n      'MEDIUM': { variant: 'warning', label: t('priorities.medium') },\r\n      'LOW': { variant: 'default', label: t('priorities.low') },\r\n      'URGENT': { variant: 'destructive', label: t('priorities.urgent') },\r\n    };\r\n\r\n    const { variant, label } = priorityMap[normalizedPriority] || {\r\n      variant: 'default',\r\n      label: normalizedPriority,\r\n    };\r\n\r\n    return <Badge variant={variant}>{label}</Badge>;\r\n  };\r\n\r\n  PriorityBadge.propTypes = {\r\n    priority: PropTypes.string.isRequired,\r\n  };\r\n\r\n  // Define table columns\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: 'orderId',\r\n        header: ({ column }) => (\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n            className=\"p-0 hover:bg-transparent\"\r\n          >\r\n            {t('orderId')}\r\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        ),\r\n        cell: ({ row }) => (\r\n          <div className=\"font-medium\">{row.getValue('orderId')}</div>\r\n        ),\r\n      },\r\n      {\r\n        accessorKey: 'customer',\r\n        header: t('customer'),\r\n        cell: ({ row }) => <div>{row.getValue('customer')}</div>,\r\n      },\r\n      {\r\n        accessorKey: 'deliveryAddress',\r\n        header: t('address'),\r\n        cell: ({ row }) => (\r\n          <div className=\"max-w-[200px] truncate\" title={row.getValue('deliveryAddress')}>\r\n            {row.getValue('deliveryAddress')}\r\n          </div>\r\n        ),\r\n      },\r\n      {\r\n        accessorKey: 'status',\r\n        header: ({ column }) => (\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n            className=\"p-0 hover:bg-transparent\"\r\n          >\r\n            {t('status')}\r\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        ),\r\n        cell: ({ row }) => <StatusBadge status={row.getValue('status')} />,\r\n      },\r\n      {\r\n        accessorKey: 'priority',\r\n        header: ({ column }) => (\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n            className=\"p-0 hover:bg-transparent\"\r\n          >\r\n            {t('priority')}\r\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        ),\r\n        cell: ({ row }) => <PriorityBadge priority={row.getValue('priority')} />,\r\n      },\r\n      {\r\n        accessorKey: 'deliverer',\r\n        header: t('deliverer'),\r\n        cell: ({ row }) => {\r\n          const deliverer = row.original.deliverer;\r\n          return (\r\n            <div>\r\n              {deliverer ? (\r\n                <span>{deliverer.name}</span>\r\n              ) : (\r\n                <span className=\"italic text-muted-foreground\">\r\n                  {t('unassigned')}\r\n                </span>\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        accessorKey: 'estimatedDeliveryDate',\r\n        header: ({ column }) => (\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\r\n            className=\"p-0 hover:bg-transparent\"\r\n          >\r\n            {t('scheduledDate')}\r\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        ),\r\n        cell: ({ row }) => {\r\n          const date = row.getValue('estimatedDeliveryDate');\r\n          return date ? (\r\n            <div>{new Date(date).toLocaleDateString()}</div>\r\n          ) : (\r\n            <span className=\"italic text-muted-foreground\">\r\n              {t('notScheduled')}\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        id: 'actions',\r\n        header: t('actionsHeader', { ns: 'common' }),\r\n        cell: ({ row }) => {\r\n          const delivery = row.original;\r\n          const canEdit = ['admin', 'manager'].includes(userRole);\r\n          const canDelete = userRole === 'admin';\r\n\r\n          return (\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"h-8 w-8 p-0\"\r\n                onClick={() => onView(delivery)}\r\n              >\r\n                <span className=\"sr-only\">{t('view', { ns: 'common' })}</span>\r\n                <Eye className=\"h-4 w-4\" />\r\n              </Button>\r\n              {canEdit && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-8 w-8 p-0\"\r\n                  onClick={() => onEdit(delivery)}\r\n                >\r\n                  <span className=\"sr-only\">{t('edit', { ns: 'common' })}</span>\r\n                  <Edit className=\"h-4 w-4\" />\r\n                </Button>\r\n              )}\r\n              {canDelete && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"h-8 w-8 p-0 text-destructive hover:bg-destructive/10 hover:text-destructive\"\r\n                  onClick={() => onDelete(delivery)}\r\n                >\r\n                  <span className=\"sr-only\">{t('delete', { ns: 'common' })}</span>\r\n                  <Trash2 className=\"h-4 w-4\" />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [t, userRole, onView, onEdit, onDelete]\r\n  );\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n  });\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className=\"rounded-md border bg-muted/10 p-8 text-center\">\r\n        <Package className=\"mx-auto h-12 w-12 text-muted-foreground\" />\r\n        <h3 className=\"mt-4 text-lg font-medium\">{t('noDeliveries')}</h3>\r\n        <p className=\"mt-1 text-muted-foreground\">\r\n          {t('noDeliveriesDescription')}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"rounded-md border\">\r\n      <div className=\"overflow-x-auto\">\r\n        <Table>\r\n          <THead>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TR key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <TH key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TH>\r\n                ))}\r\n              </TR>\r\n            ))}\r\n          </THead>\r\n          <TBody>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <TR key={row.id} className=\"hover:bg-muted/50\">\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TD key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TD>\r\n                ))}\r\n              </TR>\r\n            ))}\r\n          </TBody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes for main component\r\nDeliveriesTable.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object),\r\n  onEdit: PropTypes.func,\r\n  onView: PropTypes.func,\r\n  onDelete: PropTypes.func,\r\n  userRole: PropTypes.string\r\n};\r\n\r\nexport default DeliveriesTable;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Search,\r\n  Plus,\r\n  Filter,\r\n  RefreshCw,\r\n  X,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Package,\r\n} from 'lucide-react';\r\nimport { toast } from 'react-toastify';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { deliveryAPI, delivererAPI } from '../../services/api';\r\nimport LoadingSpinner from '../UI/loading-spinner';\r\nimport ErrorMessage from '../UI/error-message';\r\nimport AddressAutocomplete from '../UI/address-autocomplete';\r\nimport { Badge } from '../UI/badge';\r\nimport { DeliveriesTable } from './deliveries-table';\r\nimport { Button } from '../UI/button';\r\nimport { Input } from '../UI/input';\r\nimport { Select } from '../UI/select';\r\nimport { Card, CardContent } from '../UI/card';\r\n\r\n// Fallback data for development/demo purposes\r\nconst fallbackDeliveries = [\r\n  {\r\n    _id: 'del1',\r\n    orderId: 'ORD-12345',\r\n    customer: 'John Doe',\r\n    deliveryAddress: '123 Main St, Anytown, CA 90210',\r\n    status: 'Pending',\r\n    priority: 'Medium',\r\n    estimatedDeliveryDate: '2025-07-15T14:00:00Z',\r\n    notes: 'Leave at front door',\r\n    deliverer: null\r\n  },\r\n  {\r\n    _id: 'del2',\r\n    orderId: 'ORD-67890',\r\n    customer: 'Jane Smith',\r\n    deliveryAddress: '456 Oak Ave, Somewhere, NY 10001',\r\n    status: 'In Transit',\r\n    priority: 'High',\r\n    estimatedDeliveryDate: '2025-07-12T10:30:00Z',\r\n    notes: 'Call customer before delivery',\r\n    deliverer: {\r\n      _id: 'driver1',\r\n      name: 'Michael Brown',\r\n      phone: '555-456-7890'\r\n    }\r\n  },\r\n  {\r\n    _id: 'del3',\r\n    orderId: 'ORD-54321',\r\n    customer: 'Robert Johnson',\r\n    deliveryAddress: '789 Pine St, Elsewhere, TX 75001',\r\n    status: 'Delivered',\r\n    priority: 'Low',\r\n    estimatedDeliveryDate: '2025-07-10T16:45:00Z',\r\n    notes: '',\r\n    deliverer: {\r\n      _id: 'driver2',\r\n      name: 'Sarah Johnson',\r\n      phone: '555-987-6543'\r\n    }\r\n  }\r\n];\r\n\r\n// Fallback deliverers data\r\nconst fallbackDeliverers = [\r\n  {\r\n    _id: 'driver1',\r\n    name: 'Michael Brown',\r\n    email: 'michael.b@example.com',\r\n    phone: '555-456-7890',\r\n    status: 'Available'\r\n  },\r\n  {\r\n    _id: 'driver2',\r\n    name: 'Sarah Johnson',\r\n    email: 'sarah.j@example.com',\r\n    phone: '555-987-6543',\r\n    status: 'On Delivery'\r\n  },\r\n  {\r\n    _id: 'driver3',\r\n    name: 'John Smith',\r\n    email: 'john.smith@example.com',\r\n    phone: '555-123-4567',\r\n    status: 'Available'\r\n  }\r\n];\r\n\r\nconst DeliveriesPage = () => {\r\n  const { t } = useTranslation(['deliveries', 'common']);\r\n  \r\n  // State Management\r\n  const [deliveries, setDeliveries] = useState([]);\r\n  const [deliverers, setDeliverers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDelivery, setSelectedDelivery] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showViewModal, setShowViewModal] = useState(false);\r\n  const [modalMode, setModalMode] = useState('create'); // 'create' or 'edit'\r\n\r\n  // Pagination & Filtering\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [totalDocs, setTotalDocs] = useState(0);\r\n  const [limit] = useState(10);\r\n\r\n  // Search & Filters\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [priorityFilter, setPriorityFilter] = useState('');\r\n  const [delivererFilter, setDelivererFilter] = useState('');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  // Form State\r\n  const [formData, setFormData] = useState({\r\n    orderId: '',\r\n    customer: '',\r\n    deliveryAddress: '',\r\n    status: 'Pending',\r\n    priority: 'Medium',\r\n    estimatedDeliveryDate: '',\r\n    notes: '',\r\n    deliverer: '',\r\n  });\r\n\r\n  // Get user role from localStorage\r\n  const [userRole, setUserRole] = useState('user');\r\n\r\n  useEffect(() => {\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const user = JSON.parse(userData);\r\n      setUserRole(user.role || 'user');\r\n    }\r\n  }, []);\r\n\r\n  // Fetch Deliveries\r\n  const fetchDeliveries = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const params = {\r\n        page: currentPage,\r\n        limit,\r\n        ...(statusFilter && { status: statusFilter }),\r\n        ...(priorityFilter && { priority: priorityFilter }),\r\n        ...(delivererFilter && { deliverer: delivererFilter }),\r\n      };\r\n\r\n      const response = await deliveryAPI.getAll(params);\r\n      setDeliveries(response.docs || []);\r\n      setTotalPages(response.totalPages || 1);\r\n      setTotalDocs(response.totalDocs || 0);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('Error fetching deliveries:', err);\r\n      setError('Failed to fetch deliveries');\r\n      toast.error('Failed to fetch deliveries. Using demo data instead.');\r\n      \r\n      // Use fallback data when API fails\r\n      setDeliveries(fallbackDeliveries);\r\n      setTotalPages(1);\r\n      setTotalDocs(fallbackDeliveries.length);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentPage, limit, statusFilter, priorityFilter, delivererFilter]);\r\n\r\n  // Fetch Deliverers for Assignment\r\n  const fetchDeliverers = useCallback(async () => {\r\n    try {\r\n      const response = await delivererAPI.getAll();\r\n      // Store all deliverers\r\n      const allDeliverers = response.docs || response || [];\r\n      setDeliverers(allDeliverers);\r\n    } catch (err) {\r\n      console.error('Error fetching deliverers:', err);\r\n      toast.error('Failed to fetch deliverers. Using demo data instead.');\r\n      \r\n      // Use fallback data when API fails\r\n      setDeliverers(fallbackDeliverers);\r\n    }\r\n  }, []);\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    fetchDeliveries();\r\n  }, [fetchDeliveries]);\r\n\r\n  useEffect(() => {\r\n    fetchDeliverers();\r\n  }, [fetchDeliverers]);\r\n\r\n  // Filtered deliveries for search\r\n  const filteredDeliveries = deliveries.filter(\r\n    delivery =>\r\n      delivery.orderId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      delivery.customer?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      delivery.deliveryAddress?.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  // Debug logs\r\n  useEffect(() => {\r\n    console.log('Deliveries state:', deliveries);\r\n    console.log('Filtered deliveries:', filteredDeliveries);\r\n    console.log('Search term:', searchTerm);\r\n    console.log('Status filter:', statusFilter);\r\n    console.log('Priority filter:', priorityFilter);\r\n    console.log('Deliverer filter:', delivererFilter);\r\n  }, [deliveries, filteredDeliveries, searchTerm, statusFilter, priorityFilter, delivererFilter]);\r\n\r\n  // Handle Form Submission\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    console.log('Delivery form submission triggered');\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Validate required fields\r\n      if (!formData.customer.trim()) {\r\n        console.log('Validation error: Customer name is required');\r\n        toast.error('Customer name is required');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      if (!formData.deliveryAddress.trim()) {\r\n        console.log('Validation error: Delivery address is required');\r\n        toast.error('Delivery address is required');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Validate estimated delivery date\r\n      const estimatedDate = new Date(formData.estimatedDeliveryDate);\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0); // Reset time to start of day for comparison\r\n\r\n      if (estimatedDate < today) {\r\n        console.log('Validation error: Estimated delivery date must be in the future');\r\n        toast.error('Estimated delivery date must be in the future');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Convert status and priority to the format expected by the backend\r\n      const convertStatus = (status) => {\r\n        switch(status) {\r\n          case 'PENDING': return 'Pending';\r\n          case 'IN_TRANSIT': return 'In Transit';\r\n          case 'DELIVERED': return 'Delivered';\r\n          case 'CANCELLED': return 'Cancelled';\r\n          default: return status;\r\n        }\r\n      };\r\n\r\n      const convertPriority = (priority) => {\r\n        switch(priority) {\r\n          case 'LOW': return 'Low';\r\n          case 'MEDIUM': return 'Medium';\r\n          case 'HIGH': return 'High';\r\n          case 'URGENT': return 'Urgent';\r\n          default: return priority;\r\n        }\r\n      };\r\n\r\n      // Create submission data - omit orderId for new deliveries\r\n      const submissionData =\r\n        modalMode === 'create'\r\n          ? {\r\n              customer: formData.customer,\r\n              deliveryAddress: formData.deliveryAddress,\r\n              status: convertStatus(formData.status), // Convert to format expected by backend\r\n              priority: convertPriority(formData.priority), // Convert to format expected by backend\r\n              estimatedDeliveryDate: formData.estimatedDeliveryDate\r\n                ? new Date(formData.estimatedDeliveryDate).toISOString()\r\n                : undefined,\r\n              notes: formData.notes,\r\n              deliverer: formData.deliverer || undefined,\r\n            }\r\n          : {\r\n              ...formData,\r\n              status: convertStatus(formData.status), // Convert to format expected by backend\r\n              priority: convertPriority(formData.priority), // Convert to format expected by backend\r\n              estimatedDeliveryDate: formData.estimatedDeliveryDate\r\n                ? new Date(formData.estimatedDeliveryDate).toISOString()\r\n                : undefined,\r\n              deliverer: formData.deliverer || undefined,\r\n            };\r\n\r\n      console.log('Prepared submission data:', submissionData);\r\n\r\n      // Store previous deliverer ID if we're editing\r\n      const previousDelivererId =\r\n        modalMode === 'edit' ? selectedDelivery.deliverer?._id : null;\r\n\r\n      if (modalMode === 'create') {\r\n        console.log('Creating delivery with data:', submissionData);\r\n        try {\r\n          // Check if we have an auth token\r\n          const token = localStorage.getItem('authToken');\r\n          console.log('Auth token exists:', !!token, token ? `Length: ${token.length}` : '');\r\n          \r\n          const response = await deliveryAPI.create(submissionData);\r\n          console.log('Created delivery:', response);\r\n          toast.success('Delivery created successfully!');\r\n          setShowModal(false);\r\n          resetForm();\r\n\r\n          // Force refresh deliveries with a slight delay to ensure backend has updated\r\n          setTimeout(() => {\r\n            fetchDeliveries();\r\n          }, 300);\r\n        } catch (err) {\r\n          console.error('Error creating delivery:', err);\r\n          console.error('Error details:', JSON.stringify(err, null, 2));\r\n          \r\n          if (err.data && err.data.errors && Array.isArray(err.data.errors)) {\r\n            // Handle validation errors array\r\n            console.log('Validation errors from API:', err.data.errors);\r\n            err.data.errors.forEach(error => {\r\n              toast.error(`${error.field}: ${error.message}`);\r\n            });\r\n          } else if (err.data && err.data.message) {\r\n            console.log('Error message from API:', err.data.message);\r\n            toast.error(err.data.message);\r\n          } else if (err.message) {\r\n            console.log('Error message:', err.message);\r\n            toast.error(err.message);\r\n          } else {\r\n            console.log('Unknown error format:', err);\r\n            toast.error('Failed to create delivery. Please check your input and try again.');\r\n          }\r\n          \r\n          // Don't close the modal or reset the form so the user can fix the issues\r\n          setLoading(false);\r\n        }\r\n      } else {\r\n        // Handle edit mode\r\n        console.log('Updating delivery with data:', submissionData);\r\n        try {\r\n          await deliveryAPI.update(selectedDelivery._id, submissionData);\r\n          toast.success('Delivery updated successfully!');\r\n\r\n          // Update deliverer status if assigned\r\n          if (\r\n            formData.deliverer &&\r\n            formData.deliverer !== previousDelivererId\r\n          ) {\r\n            try {\r\n              await delivererAPI.updateStatus(formData.deliverer, 'Busy');\r\n              console.log(\r\n                `Updated deliverer ${formData.deliverer} status to Busy`\r\n              );\r\n            } catch (err) {\r\n              console.error('Error updating deliverer status:', err);\r\n            }\r\n          }\r\n\r\n          // If previous deliverer was unassigned, update their status to Available\r\n          if (\r\n            previousDelivererId &&\r\n            previousDelivererId !== formData.deliverer\r\n          ) {\r\n            try {\r\n              await delivererAPI.updateStatus(previousDelivererId, 'Available');\r\n              console.log(\r\n                `Updated deliverer ${previousDelivererId} status to Available`\r\n              );\r\n            } catch (err) {\r\n              console.error('Error updating deliverer status:', err);\r\n            }\r\n          }\r\n\r\n          setShowModal(false);\r\n          resetForm();\r\n          fetchDeliveries();\r\n        } catch (err) {\r\n          console.error('Error updating delivery:', err);\r\n          \r\n          if (err.response?.data?.message) {\r\n            toast.error(err.response.data.message);\r\n          } else if (err.message) {\r\n            toast.error(err.message);\r\n          } else {\r\n            toast.error('Failed to update delivery');\r\n          }\r\n          \r\n          // Don't close the modal or reset the form so the user can fix the issues\r\n          setLoading(false);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Unexpected error:', err);\r\n      toast.error('An unexpected error occurred');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle Delete\r\n  const handleDelete = async delivery => {\r\n    if (!window.confirm('Are you sure you want to delete this delivery?'))\r\n      return;\r\n\r\n    try {\r\n      // Check if the parameter is a delivery object or just an ID\r\n      const deliveryId = typeof delivery === 'object' ? delivery._id : delivery;\r\n      \r\n      if (!deliveryId) {\r\n        console.error('Invalid delivery ID:', deliveryId);\r\n        toast.error('Cannot delete delivery: Invalid ID');\r\n        return;\r\n      }\r\n      \r\n      console.log(`Deleting delivery with ID: ${deliveryId}`);\r\n      await deliveryAPI.delete(deliveryId);\r\n      toast.success('Delivery deleted successfully!');\r\n      fetchDeliveries();\r\n    } catch (err) {\r\n      console.error('Error deleting delivery:', err);\r\n      toast.error(`Failed to delete delivery: ${err.message || 'Unknown error'}`);\r\n    }\r\n  };\r\n\r\n  // Handle Status Update\r\n  const handleStatusUpdate = async (deliveryId, newStatus) => {\r\n    try {\r\n      // Convert status to the format expected by the backend\r\n      const convertStatus = (status) => {\r\n        switch(status) {\r\n          case 'PENDING': return 'Pending';\r\n          case 'IN_TRANSIT': return 'In Transit';\r\n          case 'DELIVERED': return 'Delivered';\r\n          case 'CANCELLED': return 'Cancelled';\r\n          default: return status;\r\n        }\r\n      };\r\n      \r\n      const backendStatus = convertStatus(newStatus.toUpperCase().replace(' ', '_'));\r\n      \r\n      // Prevent users from changing status to \"Delivered\" or \"In Transit\"\r\n      if (\r\n        userRole !== 'admin' &&\r\n        (backendStatus === 'Delivered' || backendStatus === 'In Transit')\r\n      ) {\r\n        toast.error(\r\n          'Only administrators can mark deliveries as Delivered or In Transit'\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Get the delivery to check if it has a deliverer assigned\r\n      const deliveryToUpdate = deliveries.find(d => d._id === deliveryId);\r\n      if (\r\n        (backendStatus === 'In Transit' || backendStatus === 'Delivered') &&\r\n        !deliveryToUpdate.deliverer\r\n      ) {\r\n        toast.error(\r\n          `Cannot change status to ${newStatus}. A deliverer must be assigned first.`\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Store the deliverer ID if the delivery is being marked as delivered\r\n      const delivererId = \r\n        backendStatus === 'Delivered' && deliveryToUpdate.deliverer \r\n          ? deliveryToUpdate.deliverer._id \r\n          : null;\r\n\r\n      setLoading(true);\r\n      console.log(`Updating delivery ${deliveryId} status to ${backendStatus}`);\r\n      const response = await deliveryAPI.updateStatus(deliveryId, backendStatus);\r\n      console.log('Status update response:', response);\r\n      \r\n      // If the delivery was marked as delivered and had a deliverer assigned,\r\n      // the backend should have updated the deliverer status to \"Available\"\r\n      if (backendStatus === 'Delivered' && delivererId) {\r\n        console.log(`Delivery marked as delivered. Deliverer ${delivererId} should be available now.`);\r\n        toast.success(`Status updated to ${newStatus} and deliverer is now Available`);\r\n      } else {\r\n        toast.success(`Status updated to ${newStatus}`);\r\n      }\r\n      \r\n      // Refresh both deliveries and deliverers lists\r\n      await fetchDeliveries();\r\n      \r\n      // If we're updating to Delivered, also refresh the deliverers list\r\n      if (backendStatus === 'Delivered' && delivererId) {\r\n        try {\r\n          await fetchDeliverers();\r\n        } catch (err) {\r\n          console.error('Error refreshing deliverers after status update:', err);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error updating status:', err);\r\n      console.error('Error details:', err.response?.data || err.message);\r\n\r\n      // Handle specific error for missing deliverer\r\n      if (err.response?.data?.message?.includes('deliverer must be assigned')) {\r\n        toast.error(err.response.data.message);\r\n      } else {\r\n        toast.error('Failed to update status');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Modal Handlers\r\n  const openCreateModal = () => {\r\n    setModalMode('create');\r\n    resetForm();\r\n\r\n    // Set tomorrow as the default estimated delivery date\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const tomorrowStr = tomorrow.toISOString().split('T')[0];\r\n\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      estimatedDeliveryDate: tomorrowStr,\r\n      status: 'PENDING', // Keep as uppercase for UI consistency, will be converted during submission\r\n    }));\r\n\r\n    setShowModal(true);\r\n  };\r\n\r\n  const openEditModal = delivery => {\r\n    setModalMode('edit');\r\n    setSelectedDelivery(delivery);\r\n    \r\n    // Normalize status and priority to uppercase format for UI consistency\r\n    const normalizedStatus = delivery.status === 'Pending' ? 'PENDING' :\r\n                            delivery.status === 'In Transit' ? 'IN_TRANSIT' :\r\n                            delivery.status === 'Delivered' ? 'DELIVERED' :\r\n                            delivery.status === 'Cancelled' ? 'CANCELLED' :\r\n                            delivery.status?.toUpperCase() || 'PENDING';\r\n                            \r\n    const normalizedPriority = delivery.priority === 'Low' ? 'LOW' :\r\n                              delivery.priority === 'Medium' ? 'MEDIUM' :\r\n                              delivery.priority === 'High' ? 'HIGH' :\r\n                              delivery.priority === 'Urgent' ? 'URGENT' :\r\n                              delivery.priority?.toUpperCase() || 'MEDIUM';\r\n    \r\n    setFormData({\r\n      orderId: delivery.orderId || '',\r\n      customer: delivery.customer || '',\r\n      deliveryAddress: delivery.deliveryAddress || '',\r\n      status: normalizedStatus,\r\n      priority: normalizedPriority,\r\n      estimatedDeliveryDate: delivery.estimatedDeliveryDate\r\n        ? new Date(delivery.estimatedDeliveryDate).toISOString().split('T')[0]\r\n        : '',\r\n      notes: delivery.notes || '',\r\n      deliverer: delivery.deliverer?._id || '',\r\n    });\r\n    setShowModal(true);\r\n  };\r\n\r\n  const openViewModal = delivery => {\r\n    setSelectedDelivery(delivery);\r\n    setShowViewModal(true);\r\n  };\r\n\r\n  // Reset Form\r\n  const resetForm = () => {\r\n    // Set tomorrow as the default estimated delivery date\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const tomorrowStr = tomorrow.toISOString().split('T')[0];\r\n\r\n    setFormData({\r\n      orderId: '', // This will be auto-generated by the backend\r\n      customer: '',\r\n      deliveryAddress: '',\r\n      status: 'PENDING', // Keep as uppercase for UI consistency, will be converted during submission\r\n      priority: 'MEDIUM', // Keep as uppercase for UI consistency, will be converted during submission\r\n      estimatedDeliveryDate: tomorrowStr,\r\n      notes: '',\r\n      deliverer: '',\r\n    });\r\n    setSelectedDelivery(null);\r\n  };\r\n\r\n  // Clear Filters\r\n  const clearFilters = () => {\r\n    setStatusFilter('');\r\n    setPriorityFilter('');\r\n    setDelivererFilter('');\r\n    setSearchTerm('');\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  // Status Badge Component\r\n  const StatusBadge = ({ status }) => {\r\n    // Map backend status values to UI display values\r\n    const normalizedStatus = status === 'PENDING' ? 'Pending' :\r\n                            status === 'IN_TRANSIT' ? 'In Transit' :\r\n                            status === 'DELIVERED' ? 'Delivered' :\r\n                            status === 'CANCELLED' ? 'Cancelled' :\r\n                            status; // Use as-is if not matching\r\n\r\n    const statusColors = {\r\n      'Pending': 'bg-yellow-100 text-yellow-800',\r\n      'In Transit': 'bg-blue-100 text-blue-800',\r\n      'Delivered': 'bg-green-100 text-green-800',\r\n      'Cancelled': 'bg-red-100 text-red-800',\r\n      'PENDING': 'bg-yellow-100 text-yellow-800',\r\n      'IN_TRANSIT': 'bg-blue-100 text-blue-800',\r\n      'DELIVERED': 'bg-green-100 text-green-800',\r\n      'CANCELLED': 'bg-red-100 text-red-800',\r\n    };\r\n    \r\n    return (\r\n      <Badge className={statusColors[normalizedStatus] || 'bg-gray-100 text-gray-800'}>\r\n        {normalizedStatus}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  // Priority Badge Component\r\n  const PriorityBadge = ({ priority }) => {\r\n    // Map backend priority values to UI display values\r\n    const normalizedPriority = priority === 'HIGH' ? 'High' :\r\n                              priority === 'MEDIUM' ? 'Medium' :\r\n                              priority === 'LOW' ? 'Low' :\r\n                              priority === 'URGENT' ? 'Urgent' :\r\n                              priority; // Use as-is if not matching\r\n\r\n    const priorityColors = {\r\n      'Low': 'bg-blue-100 text-blue-800',\r\n      'Medium': 'bg-yellow-100 text-yellow-800',\r\n      'High': 'bg-orange-100 text-orange-800',\r\n      'Urgent': 'bg-red-100 text-red-800',\r\n      'LOW': 'bg-blue-100 text-blue-800',\r\n      'MEDIUM': 'bg-yellow-100 text-yellow-800',\r\n      'HIGH': 'bg-orange-100 text-orange-800',\r\n      'URGENT': 'bg-red-100 text-red-800',\r\n    };\r\n    \r\n    return (\r\n      <Badge className={priorityColors[normalizedPriority] || 'bg-gray-100 text-gray-800'}>\r\n        {normalizedPriority}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  if (loading && deliveries.length === 0) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  if (error && deliveries.length === 0) {\r\n    return (\r\n      <ErrorMessage message={error} onRetry={() => window.location.reload()} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='mx-auto max-w-7xl px-4 py-6'>\r\n      {/* Header */}\r\n      <div className='mb-8 flex flex-col gap-6 rounded-xl bg-card p-6 shadow md:flex-row md:items-start md:justify-between'>\r\n        <div>\r\n          <h1 className='flex items-center gap-2 text-2xl font-bold'>\r\n            <Package className='h-6 w-6 text-primary' />\r\n            {t('title')}\r\n          </h1>\r\n          <p className='text-muted-foreground'>\r\n            {t('deliveryDetails')}\r\n          </p>\r\n        </div>\r\n        <div className='flex gap-2'>\r\n          <Button\r\n            variant='outline'\r\n            size='sm'\r\n            onClick={fetchDeliveries}\r\n            disabled={loading}\r\n            className='flex items-center gap-2'\r\n          >\r\n            <RefreshCw\r\n              className={loading ? 'h-4 w-4 animate-spin' : 'h-4 w-4'}\r\n            />\r\n            {t('common:refresh')}\r\n          </Button>\r\n          <Button\r\n            onClick={openCreateModal}\r\n            size='sm'\r\n            className='flex items-center gap-2'\r\n          >\r\n            <Plus className='h-4 w-4' /> {t('newDelivery')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <div className='mb-6 flex flex-col items-start justify-between gap-4 md:flex-row md:items-center'>\r\n        <div className='relative w-full md:max-w-md'>\r\n          <Search className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />\r\n          <Input\r\n            type='text'\r\n            placeholder={t('deliveries:destinationPlaceholder')}\r\n            value={searchTerm}\r\n            onChange={e => setSearchTerm(e.target.value)}\r\n            className='pl-10'\r\n          />\r\n        </div>\r\n\r\n        <div className='flex items-center gap-2'>\r\n          <Button\r\n            variant={showFilters ? 'default' : 'outline'}\r\n            size='sm'\r\n            className='flex items-center gap-2'\r\n            onClick={() => setShowFilters(!showFilters)}\r\n          >\r\n            <Filter className='h-4 w-4' />\r\n            {t('common:filter')}\r\n          </Button>\r\n\r\n          {(statusFilter || priorityFilter || delivererFilter) && (\r\n            <Button\r\n              variant='destructive'\r\n              size='sm'\r\n              className='flex items-center gap-2'\r\n              onClick={clearFilters}\r\n            >\r\n              <X className='h-4 w-4' />\r\n              {t('common:clear')}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filter Panel */}\r\n      {showFilters && (\r\n        <div className='mb-6 grid grid-cols-1 gap-6 rounded-xl bg-card p-6 shadow md:grid-cols-3'>\r\n          <div className='space-y-2'>\r\n            <label className='text-sm font-medium'>{t('status')}</label>\r\n            <Select\r\n              value={statusFilter}\r\n              onChange={e => setStatusFilter(e.target.value)}\r\n            >\r\n              <option value=''>{t('filters.all')}</option>\r\n              <option value='Pending'>{t('statuses.pending')}</option>\r\n              <option value='In Transit'>{t('statuses.inTransit')}</option>\r\n              <option value='Delivered'>{t('statuses.delivered')}</option>\r\n              <option value='Cancelled'>{t('statuses.cancelled')}</option>\r\n            </Select>\r\n          </div>\r\n\r\n          <div className='space-y-2'>\r\n            <label className='text-sm font-medium'>{t('priority')}</label>\r\n            <Select\r\n              value={priorityFilter}\r\n              onChange={e => setPriorityFilter(e.target.value)}\r\n            >\r\n              <option value=''>{t('filters.all')}</option>\r\n              <option value='Low'>{t('priorities.low')}</option>\r\n              <option value='Medium'>{t('priorities.medium')}</option>\r\n              <option value='High'>{t('priorities.high')}</option>\r\n              <option value='Urgent'>{t('priorities.urgent')}</option>\r\n            </Select>\r\n          </div>\r\n\r\n          <div className='space-y-2'>\r\n            <label className='text-sm font-medium'>{t('deliverer')}</label>\r\n            <Select\r\n              value={delivererFilter}\r\n              onChange={e => setDelivererFilter(e.target.value)}\r\n            >\r\n              <option value=''>{t('filters.all')}</option>\r\n              {deliverers.map(deliverer => (\r\n                <option key={deliverer._id} value={deliverer._id}>\r\n                  {deliverer.name}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Stats Cards */}\r\n      <div className='mb-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4'>\r\n        <Card>\r\n          <CardContent className='flex flex-col items-center justify-center pt-6'>\r\n            <span className='text-3xl font-bold'>{totalDocs}</span>\r\n            <span className='text-sm text-muted-foreground'>\r\n              {t('deliveriesTotal', { ns: 'dashboard' })}\r\n            </span>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className='flex flex-col items-center justify-center pt-6'>\r\n            <span className='text-3xl font-bold'>\r\n              {filteredDeliveries.filter(d => d.status === 'PENDING' || d.status === 'Pending').length}\r\n            </span>\r\n            <span className='text-sm text-muted-foreground'>{t('statuses.pending')}</span>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className='flex flex-col items-center justify-center pt-6'>\r\n            <span className='text-3xl font-bold'>\r\n              {filteredDeliveries.filter(d => d.status === 'IN_TRANSIT' || d.status === 'In Transit').length}\r\n            </span>\r\n            <span className='text-sm text-muted-foreground'>{t('statuses.inTransit')}</span>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className='flex flex-col items-center justify-center pt-6'>\r\n            <span className='text-3xl font-bold'>\r\n              {filteredDeliveries.filter(d => d.status === 'DELIVERED' || d.status === 'Delivered').length}\r\n            </span>\r\n            <span className='text-sm text-muted-foreground'>{t('statuses.delivered')}</span>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Deliveries Table */}\r\n      <DeliveriesTable\r\n        data={filteredDeliveries}\r\n        loading={loading}\r\n        onView={openViewModal}\r\n        onEdit={openEditModal}\r\n        onDelete={handleDelete}\r\n        userRole={userRole}\r\n      />\r\n\r\n      {/* Pagination */}\r\n      {totalPages > 1 && (\r\n        <div className='mb-6 flex items-center justify-between py-4'>\r\n          <Button\r\n            variant='outline'\r\n            size='sm'\r\n            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n            disabled={currentPage === 1}\r\n            className='flex items-center gap-1'\r\n          >\r\n            <ChevronLeft className='h-4 w-4' />\r\n            {t('common:previous')}\r\n          </Button>\r\n\r\n          <div className='text-sm text-muted-foreground'>\r\n            {t('common:page')} {currentPage} {t('common:of')} {totalPages} ({totalDocs} {t('common:total')})\r\n          </div>\r\n\r\n          <Button\r\n            variant='outline'\r\n            size='sm'\r\n            onClick={() =>\r\n              setCurrentPage(prev => Math.min(prev + 1, totalPages))\r\n            }\r\n            disabled={currentPage === totalPages}\r\n            className='flex items-center gap-1'\r\n          >\r\n            {t('common:next')}\r\n            <ChevronRight className='h-4 w-4' />\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Create/Edit Modal */}\r\n      {showModal && (\r\n        <div className='fixed inset-0 z-50 flex items-center justify-center bg-black/70'>\r\n          <div className='max-h-[90vh] w-full max-w-3xl overflow-y-auto rounded-lg bg-white p-6 text-black shadow-xl dark:bg-gray-800 dark:text-white'>\r\n            <div className='mb-4 flex items-center justify-between border-b border-gray-200 pb-4 dark:border-gray-700'>\r\n              <h3 className='text-xl font-semibold'>\r\n                {modalMode === 'create'\r\n                  ? t('newDelivery')\r\n                  : t('editDelivery')}\r\n              </h3>\r\n              <button\r\n                className='rounded-full p-1 hover:bg-muted'\r\n                onClick={() => setShowModal(false)}\r\n              >\r\n                <X size={24} />\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit} className='space-y-4'>\r\n              {modalMode === 'edit' && (\r\n                <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                  <div className='space-y-2'>\r\n                    <label className='text-sm font-medium dark:text-gray-200'>{t('deliveryID')} *</label>\r\n                    <input\r\n                      type='text'\r\n                      value={formData.orderId}\r\n                      onChange={e =>\r\n                        setFormData({ ...formData, orderId: e.target.value })\r\n                      }\r\n                      required\r\n                      disabled={true}\r\n                      placeholder={t('common:autoGenerated')}\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                    />\r\n                  </div>\r\n                  <div className='space-y-2'>\r\n                    <label className='text-sm font-medium dark:text-gray-200'>{t('customer')} *</label>\r\n                    <input\r\n                      type='text'\r\n                      value={formData.customer}\r\n                      onChange={e =>\r\n                        setFormData({ ...formData, customer: e.target.value })\r\n                      }\r\n                      required\r\n                      placeholder={t('customerPlaceholder')}\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {modalMode === 'create' && (\r\n                <div className='space-y-2'>\r\n                  <label className='text-sm font-medium dark:text-gray-200'>{t('customer')} *</label>\r\n                  <input\r\n                    type='text'\r\n                    value={formData.customer}\r\n                    onChange={e =>\r\n                      setFormData({ ...formData, customer: e.target.value })\r\n                    }\r\n                    required\r\n                    placeholder={t('customerPlaceholder')}\r\n                    className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n              <div className='space-y-2'>\r\n                <label className='text-sm font-medium dark:text-gray-200'>{t('destination')}</label>\r\n                <AddressAutocomplete\r\n                  value={formData.deliveryAddress}\r\n                  onChange={address =>\r\n                    setFormData({ ...formData, deliveryAddress: address })\r\n                  }\r\n                  placeholder={t('destinationPlaceholder')}\r\n                  disabled={loading}\r\n                />\r\n                <small className='text-xs text-muted-foreground'>\r\n                  {t('deliverers:startTypingForSuggestions')}\r\n                </small>\r\n              </div>\r\n\r\n              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                {/* Only show Status field in edit mode */}\r\n                {modalMode === 'edit' && (\r\n                  <div className='space-y-2'>\r\n                    <label className='text-sm font-medium dark:text-gray-200'>{t('status')}</label>\r\n                    <select\r\n                      value={formData.status}\r\n                      onChange={e =>\r\n                        setFormData({ ...formData, status: e.target.value })\r\n                      }\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                    >\r\n                      <option value='PENDING'>{t('statuses.pending')}</option>\r\n                      <option value='IN_TRANSIT'>{t('statuses.inTransit')}</option>\r\n                      <option value='DELIVERED'>{t('statuses.delivered')}</option>\r\n                      <option value='CANCELLED'>{t('statuses.cancelled')}</option>\r\n                    </select>\r\n                  </div>\r\n                )}\r\n                <div className='space-y-2'>\r\n                  <label className='text-sm font-medium dark:text-gray-200'>{t('priority')}</label>\r\n                                      <select\r\n                      value={formData.priority}\r\n                      onChange={e =>\r\n                        setFormData({ ...formData, priority: e.target.value })\r\n                      }\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                  >\r\n                    <option value='LOW'>{t('priorities.low')}</option>\r\n                    <option value='MEDIUM'>{t('priorities.medium')}</option>\r\n                    <option value='HIGH'>{t('priorities.high')}</option>\r\n                    <option value='URGENT'>{t('priorities.urgent')}</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                <div className='space-y-2'>\r\n                  <label className='text-sm font-medium dark:text-gray-200'>{t('scheduledDate')} *</label>\r\n                                      <input\r\n                      type='date'\r\n                      value={formData.estimatedDeliveryDate}\r\n                      onChange={e =>\r\n                        setFormData({\r\n                          ...formData,\r\n                          estimatedDeliveryDate: e.target.value,\r\n                        })\r\n                      }\r\n                      min={new Date().toISOString().split('T')[0]} // Set minimum date to today\r\n                      required\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                  />\r\n                  <small className='text-xs text-muted-foreground'>{t('common:mustBeFutureDate')}</small>\r\n                </div>\r\n                {userRole === 'admin' && (\r\n                  <div className='space-y-2'>\r\n                    <label className='text-sm font-medium dark:text-gray-200'>{t('deliverer')}</label>\r\n                    <select\r\n                      value={formData.deliverer}\r\n                      onChange={e =>\r\n                        setFormData({ ...formData, deliverer: e.target.value })\r\n                      }\r\n                      className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                    >\r\n                      <option value=''>{t('unassigned')}</option>\r\n                      {/* Filter to only show available deliverers */}\r\n                      {deliverers\r\n                        .filter(deliverer => deliverer.status === 'Available')\r\n                        .map(deliverer => (\r\n                          <option key={deliverer._id} value={deliverer._id}>\r\n                            {deliverer.name} - {deliverer.email}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                    {deliverers.filter(deliverer => deliverer.status === 'Available').length === 0 && (\r\n                      <small className='text-xs text-warning'>\r\n                        {t('common:noAvailableDeliverers')}\r\n                      </small>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className='space-y-2'>\r\n                <label className='text-sm font-medium dark:text-gray-200'>{t('notes')}</label>\r\n                                  <textarea\r\n                    value={formData.notes}\r\n                    onChange={e =>\r\n                      setFormData({ ...formData, notes: e.target.value })\r\n                    }\r\n                    placeholder={t('notesPlaceholder')}\r\n                    rows='3'\r\n                    className='w-full rounded-md border border-input bg-background px-3 py-2 text-foreground dark:border-gray-600 dark:bg-gray-700'\r\n                />\r\n              </div>\r\n\r\n              <div className='flex justify-end space-x-3 border-t border-gray-200 pt-4 dark:border-gray-700'>\r\n                <Button\r\n                  type='button'\r\n                  variant='outline'\r\n                  onClick={() => setShowModal(false)}\r\n                >\r\n                  {t('deliverers:cancel')}\r\n                </Button>\r\n                <Button\r\n                  type='submit'\r\n                  disabled={loading}\r\n                >\r\n                  {loading ? (\r\n                    <>\r\n                      <RefreshCw className='mr-2 h-4 w-4 animate-spin' />\r\n                      {modalMode === 'create' ? t('common:creating') : t('common:updating')}\r\n                    </>\r\n                  ) : modalMode === 'create' ? (\r\n                    t('newDelivery')\r\n                  ) : (\r\n                    t('editDelivery')\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* View Modal */}\r\n      {showViewModal && selectedDelivery && (\r\n        <div className='fixed inset-0 z-50 flex items-center justify-center bg-black/70'>\r\n          <div className='max-h-[90vh] w-full max-w-3xl overflow-y-auto rounded-lg bg-white p-6 text-black shadow-xl dark:bg-gray-800 dark:text-white'>\r\n            <div className='mb-4 flex items-center justify-between border-b border-gray-200 pb-4 dark:border-gray-700'>\r\n              <h3 className='text-xl font-semibold'>{t('deliveryDetails')}</h3>\r\n              <button\r\n                className='rounded-full p-1 hover:bg-muted'\r\n                onClick={() => setShowViewModal(false)}\r\n              >\r\n                <X size={24} />\r\n              </button>\r\n            </div>\r\n\r\n            <div className='space-y-6'>\r\n              <div className='space-y-3'>\r\n                <h4 className='text-lg font-medium'>{t('common:basicInfo')}</h4>\r\n                <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('deliveryID')}</label>\r\n                    <p className='font-medium'>\r\n                      {selectedDelivery.orderId}\r\n                    </p>\r\n                  </div>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('customer')}</label>\r\n                    <p className='font-medium'>\r\n                      {selectedDelivery.customer}\r\n                    </p>\r\n                  </div>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('status')}</label>\r\n                    <div>\r\n                      <StatusBadge status={selectedDelivery.status} />\r\n                    </div>\r\n                  </div>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('priority')}</label>\r\n                    <div>\r\n                      <PriorityBadge priority={selectedDelivery.priority} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className='space-y-3'>\r\n                <h4 className='text-lg font-medium'>{t('deliveryInformation')}</h4>\r\n                <div className='grid grid-cols-1 gap-4'>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('deliveryAddress')}</label>\r\n                    <p className='font-medium'>\r\n                      {selectedDelivery.deliveryAddress ||\r\n                        'No address provided'}\r\n                    </p>\r\n                  </div>\r\n                  <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                    <div className='space-y-1'>\r\n                      <label className='text-sm text-muted-foreground'>{t('estimatedDate')}</label>\r\n                      <p className='font-medium'>\r\n                        {selectedDelivery.estimatedDeliveryDate\r\n                          ? new Date(\r\n                              selectedDelivery.estimatedDeliveryDate\r\n                            ).toLocaleDateString()\r\n                          : 'Not set'}\r\n                      </p>\r\n                    </div>\r\n                    <div className='space-y-1'>\r\n                      <label className='text-sm text-muted-foreground'>{t('actualDate')}</label>\r\n                      <p className='font-medium'>\r\n                        {selectedDelivery.actualDeliveryDate\r\n                          ? new Date(\r\n                              selectedDelivery.actualDeliveryDate\r\n                            ).toLocaleDateString()\r\n                          : 'Not delivered yet'}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className='space-y-3'>\r\n                <h4 className='text-lg font-medium'>{t('assignmentTracking')}</h4>\r\n                <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('assignedDeliverer')}</label>\r\n                    <p className='font-medium'>\r\n                      {selectedDelivery.deliverer\r\n                        ? `${selectedDelivery.deliverer.name} (${selectedDelivery.deliverer.email})`\r\n                        : 'Unassigned'}\r\n                    </p>\r\n                  </div>\r\n                  <div className='space-y-1'>\r\n                    <label className='text-sm text-muted-foreground'>{t('createdDate')}</label>\r\n                    <p className='font-medium'>\r\n                      {new Date(\r\n                        selectedDelivery.createdAt\r\n                      ).toLocaleDateString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {selectedDelivery.notes && (\r\n                <div className='space-y-3'>\r\n                  <h4 className='text-lg font-medium'>{t('notes')}</h4>\r\n                  <p>{selectedDelivery.notes}</p>\r\n                </div>\r\n              )}\r\n\r\n              <div className='flex justify-end space-x-3 border-t border-gray-200 pt-4 dark:border-gray-700'>\r\n                {userRole === 'admin' && (\r\n                  <Button\r\n                    variant='outline'\r\n                    onClick={() => {\r\n                      setShowViewModal(false);\r\n                      openEditModal(selectedDelivery);\r\n                    }}\r\n                  >\r\n                    {t('editDelivery')}\r\n                  </Button>\r\n                )}\r\n                <Button onClick={() => setShowViewModal(false)}>\r\n                  {t('close')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeliveriesPage;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from './input';\r\nimport { MapPin, Loader2, AlertCircle } from 'lucide-react';\r\n\r\n// Geoapify API key and project ID\r\nconst GEOAPIFY_API_KEY = '6d177e3213d4451d87c9e1561ee3b8d3';\r\nconst GEOAPIFY_PROJECT_ID = '7YuzBeC5u2hoonqNRzlS';\r\n\r\n/**\r\n * Address autocomplete component with Geoapify API integration\r\n */\r\nconst AddressAutocomplete = ({\r\n  value,\r\n  onChange,\r\n  onSelect,\r\n  placeholder = 'Enter an address',\r\n  className = '',\r\n  inputClassName = '',\r\n  disabled = false,\r\n  required = false,\r\n  ...props\r\n}) => {\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [focused, setFocused] = useState(false);\r\n  const [apiError, setApiError] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const suggestionsRef = useRef(null);\r\n  const debounceTimerRef = useRef(null);\r\n\r\n  // Handle click outside to close suggestions\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (suggestionsRef.current && !suggestionsRef.current.contains(event.target)) {\r\n        setSuggestions([]);\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Fetch address suggestions from Geoapify\r\n  const fetchAddressSuggestions = async (query) => {\r\n    if (!query || query.length < 3) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(query)}&apiKey=${GEOAPIFY_API_KEY}&format=json&limit=5`;\r\n      \r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Geoapify API error: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data && data.results) {\r\n        const addressSuggestions = data.results.map(result => ({\r\n          formattedAddress: result.formatted,\r\n          lat: result.lat,\r\n          lon: result.lon,\r\n          country: result.country,\r\n          state: result.state,\r\n          city: result.city,\r\n          street: result.street,\r\n          houseNumber: result.housenumber,\r\n          postcode: result.postcode,\r\n          raw: result\r\n        }));\r\n        \r\n        setSuggestions(addressSuggestions);\r\n      } else {\r\n        setSuggestions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching address suggestions:', error);\r\n      setApiError(true);\r\n      setSuggestions([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle suggestion selection\r\n  const handleSuggestionSelect = (suggestion) => {\r\n    if (onChange) {\r\n      onChange(suggestion.formattedAddress);\r\n    }\r\n    \r\n    if (onSelect) {\r\n      onSelect(suggestion);\r\n    }\r\n    \r\n    setSuggestions([]);\r\n  };\r\n\r\n  // Handle input change with debounce\r\n  const handleInputChange = (e) => {\r\n    const newValue = e.target.value;\r\n    \r\n    if (onChange) {\r\n      onChange(newValue);\r\n    }\r\n    \r\n    // Clear previous timer\r\n    if (debounceTimerRef.current) {\r\n      clearTimeout(debounceTimerRef.current);\r\n    }\r\n    \r\n    if (newValue.length >= 3) {\r\n      setLoading(true);\r\n      // Debounce API calls to avoid too many requests\r\n      debounceTimerRef.current = setTimeout(() => {\r\n        fetchAddressSuggestions(newValue);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative ${className}`} {...props}>\r\n      <div className=\"relative\">\r\n        <Input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={value || ''}\r\n          onChange={handleInputChange}\r\n          placeholder={apiError ? \"Enter address manually\" : placeholder}\r\n          className={`pl-10 ${inputClassName}`}\r\n          disabled={disabled}\r\n          required={required}\r\n          onFocus={() => setFocused(true)}\r\n          onBlur={() => setTimeout(() => setFocused(false), 200)}\r\n        />\r\n        <div className=\"absolute left-3 top-1/2 -translate-y-1/2\">\r\n          {loading ? (\r\n            <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\r\n          ) : apiError ? (\r\n            <AlertCircle className=\"h-4 w-4 text-amber-500\" />\r\n          ) : (\r\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* API error message */}\r\n      {apiError && (\r\n        <div className=\"mt-1 text-xs text-amber-500\">\r\n          Address autocomplete unavailable. Please enter address manually.\r\n        </div>\r\n      )}\r\n\r\n      {/* Suggestions dropdown */}\r\n      {focused && suggestions.length > 0 && (\r\n        <div \r\n          ref={suggestionsRef}\r\n          className=\"absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border bg-white py-1 shadow-lg dark:bg-gray-800 dark:text-white dark:border-gray-700\"\r\n        >\r\n          {suggestions.map((suggestion, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"cursor-pointer px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n              onClick={() => handleSuggestionSelect(suggestion)}\r\n            >\r\n              <div className=\"font-medium\">{suggestion.formattedAddress}</div>\r\n              {suggestion.city && suggestion.country && (\r\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                  {[suggestion.city, suggestion.state, suggestion.country]\r\n                    .filter(Boolean)\r\n                    .join(', ')}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nAddressAutocomplete.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  className: PropTypes.string,\r\n  inputClassName: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  required: PropTypes.bool,\r\n};\r\n\r\nexport default AddressAutocomplete; "],"names":["DeliveriesTable","_ref","data","onEdit","onView","onDelete","userRole","t","useTranslation","StatusBadge","_ref2","status","normalizedStatus","statusMap","variant","label","_jsx","Badge","children","PriorityBadge","_ref3","priority","normalizedPriority","priorityMap","columns","useMemo","accessorKey","header","_ref4","column","_jsxs","Button","onClick","toggleSorting","getIsSorted","className","ArrowUpDown","cell","_ref5","row","getValue","_ref6","_ref7","title","_ref8","_ref9","_ref10","_ref11","_ref12","deliverer","original","name","_ref13","_ref14","date","Date","toLocaleDateString","id","ns","_ref15","delivery","canEdit","includes","canDelete","size","Eye","Edit","Trash2","table","useReactTable","getCoreRowModel","getSortedRowModel","getFilteredRowModel","length","Table","THead","getHeaderGroups","map","headerGroup","TR","headers","TH","isPlaceholder","flexRender","columnDef","getContext","TBody","getRowModel","rows","getVisibleCells","TD","Package","fallbackDeliveries","_id","orderId","customer","deliveryAddress","estimatedDeliveryDate","notes","phone","fallbackDeliverers","email","DeliveriesPage","deliveries","setDeliveries","useState","deliverers","setDeliverers","loading","setLoading","error","setError","selectedDelivery","setSelectedDelivery","showModal","setShowModal","showViewModal","setShowViewModal","modalMode","setModalMode","currentPage","setCurrentPage","totalPages","setTotalPages","totalDocs","setTotalDocs","limit","searchTerm","setSearchTerm","statusFilter","setStatusFilter","priorityFilter","setPriorityFilter","delivererFilter","setDelivererFilter","showFilters","setShowFilters","formData","setFormData","setUserRole","useEffect","userData","localStorage","getItem","user","JSON","parse","role","fetchDeliveries","useCallback","async","params","page","response","deliveryAPI","getAll","docs","err","console","toast","fetchDeliverers","delivererAPI","allDeliverers","filteredDeliveries","filter","_delivery$orderId","_delivery$customer","_delivery$deliveryAdd","toLowerCase","log","openEditModal","_delivery$status","_delivery$priority","_delivery$deliverer","toUpperCase","toISOString","split","resetForm","tomorrow","setDate","getDate","tomorrowStr","LoadingSpinner","ErrorMessage","message","onRetry","window","location","reload","disabled","RefreshCw","openCreateModal","prev","Plus","Search","Input","type","placeholder","value","onChange","e","target","Filter","clearFilters","X","Select","Card","CardContent","d","confirm","deliveryId","delete","success","Math","max","ChevronLeft","min","ChevronRight","onSubmit","preventDefault","_selectedDelivery$del","trim","estimatedDate","today","setHours","convertStatus","convertPriority","submissionData","undefined","previousDelivererId","token","create","setTimeout","stringify","errors","Array","isArray","forEach","field","update","updateStatus","_err$response","_err$response$data","required","AddressAutocomplete","address","_Fragment","actualDeliveryDate","createdAt","onSelect","inputClassName","props","suggestions","setSuggestions","focused","setFocused","apiError","setApiError","inputRef","useRef","suggestionsRef","debounceTimerRef","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","ref","newValue","clearTimeout","query","url","encodeURIComponent","fetch","ok","Error","json","results","addressSuggestions","result","formattedAddress","formatted","lat","lon","country","state","city","street","houseNumber","housenumber","postcode","raw","fetchAddressSuggestions","onFocus","onBlur","Loader2","AlertCircle","MapPin","suggestion","index","handleSuggestionSelect","Boolean","join"],"sourceRoot":""}